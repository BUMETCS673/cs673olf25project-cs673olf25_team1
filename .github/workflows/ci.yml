
# AI-generated-code: 60% (tool: Githib CI, AI chat link: https://chatgpt.com/share/68d8a0d5-09a4-8013-a871-052c83584c2a)
# Human code: 40% (tool: gh CLI, Jordyn Lipsey is reponsible for creating the dockers and setting up the App.
# Deasia Little is reponsible for setting up Playwright and the QA metrics to calculate lines of code, code
# complexity, function count, and automate Github issue creation. The scripts to run the QA metrics were refactored
# to be included in this one file.)
# Framework generated code: 0%

name: "CI: Metrics + Tests"

on:
 push:
   branches: [main]
 pull_request:
   branches: [main]

jobs:
  metrics-and-tests:
    runs-on: ubuntu-latest

    env:
      BASE_URL: http://localhost:8000
      API_URL: http://localhost:3000

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    # Setup
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 20

    - name: Install tools for metrics
      run: |
        sudo apt-get update
        sudo apt-get install -y jq cloc
        npm install -g eslint
        npm install -D ts-node typescript

    - name: Set up GitHub CLI
      run: gh auth setup-git
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    # Run Code Metrics
    - name: Run LOC Script
      run: ./scripts/count-loc.sh > loc-report.txt

    - name: Run Function Count Script
      run: ./scripts/count-functions.sh > function-report.txt

    - name: Run ESLint Complexity Script
      run: ./scripts/eslint-report.sh > complexity-report.txt

    - name: Organize Metrics Output
      run: |
        mkdir -p metrics
        mv *-report.txt metrics/

    - name: Upload Code Metrics Artifact
      uses: actions/upload-artifact@v4
      with:
        name: code-metrics-report
        path: metrics/


    - name: Generate .env file for Docker Compose
      run: |
        cat <<-EOF > .env
          POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
          JWT_SECRET=${{ secrets.JWT_SECRET }}
          GROQ_API_KEY=${{ secrets.GROQ_API_KEY }}
        EOF

    # - name: Set secrets for Docker
    #   run: |
    #     echo "GROQ_API_KEY=${{ secrets.GROQ_API_KEY }}" >> $GITHUB_ENV
    #     echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> $GITHUB_ENV
    #     printf "POSTGRES_PASSWORD=%s\n" "${{ secrets.POSTGRES_PASSWORD }}" >> $GITHUB_ENV

    # - name: Echo Secrets
    #   run: |
    #     echo "GROQ_API_KEY is set to: $GROQ_API_KEY"
    #     echo "JWT_SECRET is set to: $JWT_SECRET"
    #     echo "POSTGRES_PASSWORD is set to: $POSTGRES_PASSWORD"

    # Start App with Docker for Playwright
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Build Backend Image
      run: |
        docker build \
          --build-arg NODE_ENV=development \
          -t chat-backend:dev ./api

    - name: Build Frontend Image
      run: |
        docker build \
          --build-arg NODE_ENV=development \
          -t chat-frontend:dev ./chit-chat-ui

    - name: Start Containers
      run: |
        docker network create e2e-network || true
        docker compose up -d

    - name: Check backend logs
      run: |
        echo "=== Backend container status ==="
        docker ps -a
        echo "=== Backend logs ==="
        sleep 5
        docker compose logs api

    - name: Verify backend container ports
      run: docker ps

    - name: Wait for Backend
      run: |
        timeout 240 bash -c 'until curl -s http://localhost:3000/health || curl -s http://localhost:3000; do echo "Waiting for backend..."; sleep 2; done'

    - name: Install pg module for seed script
      run: npm install pg

    - name: Seed test user into Postgres inside Docker
      run: docker exec api npx ts-node scripts/seedUser.ts
    # - name: Wait for Frontend
    #   run: |
    #     until curl -s http://localhost:8000; do echo "Waiting for frontend..."; sleep 2; done

    - name: Wait for Frontend UI to Render
      run: |
        for i in {1..30}; do
          if curl -s http://localhost:8000 | grep -q "<title>"; then
            echo "Frontend loaded."
            exit 0
          fi
          echo "Waiting for frontend UI..."
          sleep 2
        done
        echo "Frontend did not load in time"
        exit 1

    # Run Playwright Tests
    - name: Install Playwright & Deps
      run: |
        npm ci
        npx playwright install --with-deps
      working-directory: ./tests/e2e

    - name: Run Playwright E2E Tests and Save JSON Report
      run: |
        mkdir -p playwright-report
        npx playwright test --reporter=list,json=playwright-report/results.json      
      working-directory: ./tests/e2e
      continue-on-error: true

    - name: Debug Report Directory Contents
      run: |
        echo "Checking test output directory"
        ls -R ./tests/e2e/playwright-report || echo "Directory not found"
        ls -R ./tests/e2e || true

    - name: Move JSON report to root-level playwright-report
      run: |
        mkdir -p playwright-report
        cp tests/e2e/playwright-report/results.json playwright-report/results.json
            
    - name: Generate readable summary
      if: always()
      run: |
        if [ -f playwright-report/results.json ]; then
          node scripts/generateReadableReport.cjs
        else
          echo "Skipping summary generation: results.json not found"
        fi

    - name: Upload Playwright HTML + JSON + summary
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: playwright-report
        path: |
          tests/e2e/playwright-report/**
          test-results/**

    - name: Upload Summary Files
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: readable-playwright-summary
        path: |
          tests/e2e/playwright-report/summary.md
          tests/e2e/playwright-report/summary.html

    - name: Upload Playwright test artifacts (screenshots, videos, traces)
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: playwright-test-results
        path: test-results/

    # - name: Create GitHub Issues from Failed Tests
    #   if: failure() 
    #   env:
    #     GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    #   run: node .github/scripts/create-defects.cjs ${{ github.run_id }}

    # Clean Up
    - name: Stop Containers
      run: |
        docker stop chit-chat-ui api chit-chat-db
        docker rm chit-chat-ui api chit-chat-db
        docker network rm e2e-network || true